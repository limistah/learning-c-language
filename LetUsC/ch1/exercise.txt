[A]
BASICSALARY => Correct
_basic => Correct
basic-hra => Wrong
#MEAN => Wrong (Because of the use of #)
group. => Wrong (. is not allowed as an identifier)
422 => This is a value (Identifiers can only contain number within and end but not in all)
population => Correct
in => Correct
2006 => Wrong, as it is a value
over => Right
time => Correct
mindovermatter => Correct
FLOAT => Correct
hELLO => Correct
queue. => Wrong
team’svictory => Wrong, because of the use of the single quotes withing
Plot => Correct 
# => Invalid 
3 => Invalid
2015_DDay => Invalid, Identifiers can not start with a number
================================================================================
================================================================================
[B] Point out the errors, if any, in the following C statements:
(a) int = 314.562 * 150 ; => Wrong, invalid declaration and assignment, variable name is missing 
(b) name = ‘Ajay’ ; => Correct if the variable is already declared
(c) varchar = ‘3’ ; => Invalid
(d) 3.14 * r * r * h = vol_of_cyl ; => Wrong, assignment is right to left, not otherwise
(e) k = ( a * b ) ( c + ( 2.5a + b ) ( d + e ) ; => Wrong, C does not assume any operator
(f) m_inst = rate of interest * amount in rs ; Correct
(g) si = principal * rateofinterest * numberofyears / 100 ; => Correct
(h) area = 3.14 * r ** 2 ; => Correct
(i) volume = 3.14 * r ^ 2 * h ; => Correct
(j) k = ( (a * b ) + c ) ( 2.5 * a + b ) ; => Wrong, C does not assume operator
(k) a = b = 3 = 4 ; => Wrong, as 3 is not a valid variable identifier
(l) count = count + 1 ; => Correct
(m) date = '2 Mar 04' ; => Correct

====================================================================
====================================================================
[C] Evaluate the following expressions and show their hierarchy.
(a) g = big / 2 + big * 4 / big - big + abc / 3 ;
(abc = 2.5, big = 2, assume g to be a float)
2 / 2 + 2 * 4 / 2 - 2 + 2.5 / 3  operation /
0 + 2 * 4 / 2 - 2 + 2.5 / 3      operation *
0 + 8 / 2 - 2 + 2.5 / 3          operation /
0 + 4 - 2 + 2.5 / 3              operation /
0 + 4 - 2 + 0.833333             operation +
4 - 2 + 0.833333                 operation -
2 + 0.833333                     operation +
2.833333

(b) on = ink * act / 2 + 3 / 2 * act + 2 + tig ;
(ink = 4, act = 1, tig = 3.2, assume on to be an int)
on = 4 * 1 / 2 + 3 / 2 * 1 + 2 + 3.2
on = 4 * 1 / 2 + 3 / 2 * 1 + 2 + 3.2   operation *
on = 4 / 2 + 3 / 2 * 1 + 2 + 3.2       operation /
on = 2 + 1.5 * 1 + 2 + 3.2             operation *
on = 2 + 1.5 + 2 + 3.2                 operation +
on = 3.5 + 2 + 3.2                     operation +
on = 5.5 + 3.2                         operation +
on = 8                                 operation +


(c) s = qui * add / 4 - 6 / 2 + 2 / 3 * 6 / god ;
(qui = 4, add = 2, god = 2, assume s to be an int)
int s = 4 * 2 / 4 - 6 / 2 + 2 / 3 * 6 / 2 ;
int s = 4 * 2 / 4 - 6 / 2 + 2 / 3 * 6 / 2 ; // Operation *
int s = 8 / 4 - 6 / 2 + 2 / 3 * 6 / 2 ;     // Operation /
int s = 2 - 6 / 2 + 2 / 3 * 6 / 2 ;         // Operation /
int s = 2 - 3 + 2 / 3 * 6 / 2 ;             // Operation /
int s = 2 - 3 + 0.666667 * 6 / 2 ;          // Operation /
int s = 2 - 3 + 4.000002 / 2 ;              // Operation /
int s = 2 - 3 + 2.000001 ;                  // Operation -
int s = -1 + 2.000001 ;                     // Operation +
int s = 1.000001 ;
int s = 1 ; // Actually testing the code yields -1, I am wrong somewhere

(d) s = 1 / 3 * a / 4 - 6 / 2 + 2 / 3 * 6 / g ;
(a = 4, g = 3, assume s to be an int)
int s = 1 / 3 * 4 / 4 - 6 / 2 + 2 / 3 * 6 / 3 ;
int s = 1 / 3 * 4 / 4 - 6 / 2 + 2 / 3 * 6 / 3 ;    // Operation /
int s = 0.333333 * 4 / 4 - 6 / 2 + 2 / 3 * 6 / 3 ; // Operation *
int s = 1.333333 / 4 - 6 / 2 + 2 / 3 * 6 / 3 ;     // Operation /
int s = 0.333333 - 6 / 2 + 2 / 3 * 6 / 3 ;         // Operation /
int s = 0.333333 - 3 + 2 / 3 * 6 / 3 ;             // Operation /
int s = 0.333333 - 3 + 0.666667 * 6 / 3 ;          // Operation *
int s = 0.333333 - 3 + 4 / 3 ;                     // Operation /
int s = 0.333333 - 3 + 1.333333 ;                  // Operation /
int s = 0.333333 - 3 + 1.333333 ;                  // Operation -
int s = -2.666667 + 1.333333 ;                     // Operation +
int s = -1.333334 ;
int s = -1 ; // Wrong, should be -3

================================================================================
================================================================================
Fill the following table for the expressions given below and
then evaluate the result. A sample entry has been filled in the
table for expression (a).
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
| Operator       | Left      | Right        | Remark                           |
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
| /              | 10        | 5 or 5 / 2   | Left operand is unambiguous,     |
|                |           |              | Right is not                     |
|                |           |              |                                  |
|                |           |              |                                  |
++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
(a) g = 10 / 5 /2 / 1 ; 
(b) b = 3 / 2 + 5 * 4 / 3 ; => 3 / 2 is done first
(c) a = b = c = 3 + 4 ; => 3 + 4 is done first, + has higher priority than =

================================================================================

[E] Convert the following equations into corresponding C
statements.
(a) Z = ((8.8(a+b)) * (2/c) + (2 * a / (q+r))) / (a + b) * (1 / m)
(b) X = ((-b + (b * b)) + (2 * 4 * a * c)) / 2 * a
(c) R = (2 * v + 6.22 * (c + d)) / (g + v)
(d) A = (((7.7 * b) * (x * y + a)) / (c - 0.8 + 2 * b)) / ((x + a) * (1 / y))
================================================================================
[F] What would be the output of the following programs:
(a) prints => 1 3 2 3
(b) prints => 0 -6
(c) prints => 1
(d) prints => nn [return] [return] nn[return]
(e) prints => a = [First value from typed value separated by space] b = [Second value from typed value separated by space]
(f) prints => p = [First value from typed value separated by space] q = [Second value from typed value separated by space]
================================================================================
[G] Pick up the correct alternative for each of the following
questions:
(a) C language has been developed by
(2) Dennis Ritchie


(b) C can be used on
(4) All of MS-DOS, Linux, Windows operating system

(c) C programs are converted into machine language with the
help of
(2) A compiler

(d) The real constant in C can be expressed in which of the
following forms
(4) Both fractional and exponential forms

(e) A character variable can at a time store
(1) 1 character

(f) The statement char ch = ‘Z’ would store in ch
(2) ASCII value of Z

(g) Which of the following is NOT a character constant
(4) All the above


(h) The maximum value that an integer constant can have is
(2) 32767

(i) A C variable cannot start with
(4) Both A number & A special symbol other than underscore above

(j) Which of the following statement is wrong
(4) 3 + a = b ;

44 Let Us C
(k) Which of the following shows the correct hierarchy of
arithmetic operators in C
(4) / or *, - or +

(l) In b = 6.6 / a + 2 * n ; which operation will be performed
first?
(1) 6.6 / a

(m) Which of the following is allowed in a C Arithmetic
instruction
(4) None of [ ], { }, ( ) above

(n) Which of the following statements is false
(4) Blank spaces cannot be inserted within a variable name

(o) If a is an integer variable, a = 5 / 2 ; will return a value
(3) 2

(p) The expression, a = 7 / 22 * ( 3.14 + 2 ) * 3 / 5 ; evaluates to
(4) 0

(q) The expression, a = 30 * 1000 + 2768 ; evaluates to
(1) 32768

(r) The expression x = 4 + 2 % - 8 evaluates to
(2) 6

(s) Hierarchy decides which operator
(2) is used First

(t) An integer constant in C must have:
(1) At least one digit

(u) A character variable can never store more than
(4) 1 character

(v) In C a variable cannot contain
(4) All the above

(w) Which of the following is FALSE in C
(1) Keywords can be used as variable names

(x) In C, Arithmetic instruction cannot contain
(4) constants on left side of =

(y) Which of the following shows the correct hierarchy of
arithmetic operations in C
(4) * / + -

(z) What will be the value of d if d is a float after the operation
d = 2 / 7.0?
(2) 0.2857